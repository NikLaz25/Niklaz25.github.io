---
layout: post
title:  "Очереди (изучаю структуры данных)"
date:   2022-02-06 00:00:00 +0000
categories: python algorithms
---
[id_1]: https://github.com/NikLaz25/Algorithms_1/blob/main/queue_1.py
[id_2]: https://github.com/NikLaz25/Algorithms_1/blob/main/queue_test.py
[id_3]: https://github.com/NikLaz25/Algorithms_1/blob/main/queue_stack.py

Реализовал класс Queue на основе двунправленного связанного списка

В данном классе реализовал следующие методы:
* def __init__(self): '''инициализация хранилища данных''
* def enqueue(self, item): '''Добавляем значение в список'''  # вставка в хвост
* def dequeue(self) -> Optional[int]: # мера сложности О(1) '''выдача из головы'''
* def size(self) -> int:  # мера сложности О(n)         '''Размер'''
* def rotation(self, quantity_elements: int):
        '''поворот очереди'''

Так же использовал вспомогательные методы:
* def print_all_nodes(self):
        '''Печать значений всех узлов'''
* def LinkedList_in_List(self):
        '''Вспомогательный метод для тестирования.
        Выводит значения связанного списка в обычный список'''

[Ссылка на мой код] [id_1]

Подготовил тесты на основные методы. [Ссылка на код тестов] [id_2]

В качестве граничных вариантов учел, когда в очереди единственное значение, а также когда очередь пуста.
Проверил код с помощью линтера pylint.
Аннотацию типов проверил с помощью mypy. Оценил меры сложности основных методов.

Также реализовал метод, где очередь реализована с помощью двух стеков. [Ссылка на код] [id_3]



