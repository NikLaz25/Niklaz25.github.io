---
layout: post
title:  "Основы ООП. Повторяю пройденное"
date:   2022-01-12 00:00:00 +0000
categories: python
---

Повторил тему объектно-ориентированного программирования (ООП), в частности следующие блоки и понятия:

1. Парадигма АТД. Абстрактные типы данных. Понятие класса
* Класс  - объединение данных и функций их обработки.
* Класс — чертёж, на основе которого создаётся некоторый объект.
* Важно! Моделировать класс нужно не с помощью атрибутов, а с помощью операций над этой структурой данных.

2. Понятие экземпляра класса(объекта класса)
* Служебное слово self, в соответствии с соглашением в Python, определяет ссылку на объект (экземпляр) 
класса. 
* Переменная self связывается с объектом класса, к которому применяются методы класса.
* Через переменную self можно получить доступ к атрибутам объекта.
* Когда методы класса применяются к новому объекту класса, то self связывается с новым объектом. 
* Через эту переменную осуществляется доступ к атрибутам нового объекта.

3. Понятие атрибута.
4. Методы - операции над классом.
   При моделировании класса методы первичны, атрибуты вторичны.
5. Понятие конструктора - специальный метод, вызываемый при создании экземпляра класса, используется для инициализации значений атрибутов
6. Модификаторы доступа (для переменных). 
* Публичный (auto_name), 
* Защищенный (_auto_year)
* Приватный (__auto_model)
7. Инкапсуляция - механизм сокрытия данных. 
* Одиночное подчёркивание в начале имени атрибута или метода свидетельствует о том, 
что атрибут или методы не предназначены для использования вне класса. 
Они доступны по этому имени. 
* Использование двойного подчёркивания перед именем атрибута и метода делает их недоступными по этому имени.

8. Наследование. Класс Auto наследует характеристики класса Transport, то есть все его атрибуты и методы
* Множественное наследование
  * Несколько дочерних классов у одного родителя.
  * Несколько родителей у одного класса
9. Полиморфизм - способность объекта иметь различную функциональность
* Перегрузка методов - возможности метода отражать разную логику выполнения в зависимости от количества и типа передаваемых параметров
* Переопределение методов - наличии метода с одинаковым названием для родительского и дочернего классов




[id_Задачи]: https://github.com/NikLaz25/Python_tasks_6
[Ссылка на базовые задачи по ООП] [id_Задачи]

[id_лото]: https://github.com/NikLaz25/Game-Loto/blob/master/8.result.py
По результату прохождения курса Python основы, [был реализован проект - Игра Лото.] [id_лото]
В проекте я применил полученные знания по ООП. Применены принципы наследования

Дополнительные материалы:

[id_1]: https://python-scripts.com/object-oriented-programming-in-python
[Объектно-ориентированное Программирование в Python.] [id_1]

[id_2]: https://pythonworld.ru/osnovy/obektno-orientirovannoe-programmirovanie-obshhee-predstavlenie.html
[Объектно-ориентированное программирование. Классы и объекты.] [id_2]

[id_3]: https://younglinux.info/oopython/course
[Обучение ООП.] [id_3]

[id_4]: https://xn--80ahcjeib4ac4d.xn--p1ai/information/python_object_oriented_programming_oop/
[Python — объектно-ориентированное программирование (ООП).] [id_4]



